{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NewGroup = function NewGroup(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    groupName = _useState2[0],\n    setGroupName = _useState2[1];\n  var createGroup = function createGroup() {\n    console.log('Group Name:', groupName);\n    navigation.goBack();\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Create New Group\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Enter group name\",\n      value: groupName,\n      onChangeText: setGroupName\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: createGroup,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Create Group\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  input: {\n    width: '100%',\n    height: 40,\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 5,\n    paddingHorizontal: 10,\n    marginBottom: 20\n  },\n  button: {\n    backgroundColor: 'blue',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\nexport default NewGroup;","map":{"version":3,"names":["React","useState","View","Text","TextInput","StyleSheet","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","NewGroup","_ref","navigation","_useState","_useState2","_slicedToArray","groupName","setGroupName","createGroup","console","log","goBack","style","styles","container","children","title","input","placeholder","value","onChangeText","button","onPress","buttonText","create","flex","justifyContent","alignItems","padding","fontSize","fontWeight","marginBottom","width","height","borderWidth","borderColor","borderRadius","paddingHorizontal","backgroundColor","paddingVertical","color"],"sources":["C:/Users/kunya/ikt205g23v/stuspace/Screens/NewGroup.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity } from 'react-native';\r\n\r\nconst NewGroup = ({ navigation }) => {\r\n  const [groupName, setGroupName] = useState('');\r\n\r\n  const createGroup = () => {\r\n    // Implement logic to create the group with groupName\r\n    // For now, you can simply log the groupName\r\n    console.log('Group Name:', groupName);\r\n    // After creating the group, you can navigate back to the previous screen (MyGroup)\r\n    navigation.goBack();\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Create New Group</Text>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Enter group name\"\r\n        value={groupName}\r\n        onChangeText={setGroupName}\r\n      />\r\n      <TouchableOpacity style={styles.button} onPress={createGroup}>\r\n        <Text style={styles.buttonText}>Create Group</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  input: {\r\n    width: '100%',\r\n    height: 40,\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    marginBottom: 20,\r\n  },\r\n  button: {\r\n    backgroundColor: 'blue',\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 5,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default NewGroup;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGxC,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAC5B,IAAAC,SAAA,GAAkCb,QAAQ,CAAC,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAE9B,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IAGxBC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,SAAS,CAAC;IAErCJ,UAAU,CAACS,MAAM,CAAC,CAAC;EACrB,CAAC;EAED,OACEZ,KAAA,CAACR,IAAI;IAACqB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BlB,IAAA,CAACL,IAAI;MAACoB,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAD,QAAA,EAAC;IAAgB,CAAM,CAAC,EAClDlB,IAAA,CAACJ,SAAS;MACRmB,KAAK,EAAEC,MAAM,CAACI,KAAM;MACpBC,WAAW,EAAC,kBAAkB;MAC9BC,KAAK,EAAEb,SAAU;MACjBc,YAAY,EAAEb;IAAa,CAC5B,CAAC,EACFV,IAAA,CAACF,gBAAgB;MAACiB,KAAK,EAAEC,MAAM,CAACQ,MAAO;MAACC,OAAO,EAAEd,WAAY;MAAAO,QAAA,EAC3DlB,IAAA,CAACL,IAAI;QAACoB,KAAK,EAAEC,MAAM,CAACU,UAAW;QAAAR,QAAA,EAAC;MAAY,CAAM;IAAC,CACnC,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAED,IAAMF,MAAM,GAAGnB,UAAU,CAAC8B,MAAM,CAAC;EAC/BV,SAAS,EAAE;IACTW,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,OAAO,EAAE;EACX,CAAC;EACDZ,KAAK,EAAE;IACLa,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,YAAY,EAAE;EAChB,CAAC;EACDd,KAAK,EAAE;IACLe,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE,CAAC;IACfC,iBAAiB,EAAE,EAAE;IACrBN,YAAY,EAAE;EAChB,CAAC;EACDV,MAAM,EAAE;IACNiB,eAAe,EAAE,MAAM;IACvBC,eAAe,EAAE,EAAE;IACnBF,iBAAiB,EAAE,EAAE;IACrBD,YAAY,EAAE;EAChB,CAAC;EACDb,UAAU,EAAE;IACViB,KAAK,EAAE,OAAO;IACdV,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAe9B,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}